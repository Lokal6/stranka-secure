#!/usr/bin/env node

/**
 * API Key Export Script
 * 
 * Tento skript exportuje va≈°e API kƒæ√∫ƒçe do samostatn√©ho prieƒçinka,
 * ktor√Ω si m√¥≈æete ulo≈æi≈• na bezpeƒçn√© miesto (napr. USB kƒæ√∫ƒç, ≈°ifrovan√Ω disk).
 * 
 * Pou≈æitie:
 * 1. Spustite: node export-api-keys.js
 * 2. Zadajte cestu, kam chcete ulo≈æi≈• API kƒæ√∫ƒçe
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Vytvorenie rozhrania pre ƒç√≠tanie vstupu
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Defin√≠cia s√∫borov, ktor√© obsahuj√∫ API kƒæ√∫ƒçe
const ENV_JS_PATH = path.join(__dirname, 'allin', '.env.js');

// Objekt pre ulo≈æenie API kƒæ√∫ƒçov
const apiKeys = {
  FIREBASE: {
    API_KEY: '',
    AUTH_DOMAIN: '',
    PROJECT_ID: '',
    STORAGE_BUCKET: '',
    MESSAGING_SENDER_ID: '',
    APP_ID: '',
    MEASUREMENT_ID: ''
  },
  YOUTUBE_API_KEY: '',
  RAPID_API_KEY: '',
  GOOGLE_SIGNIN_CLIENT_ID: ''
};

// Funkcia pre naƒç√≠tanie API kƒæ√∫ƒçov z .env.js
function loadApiKeysFromEnvJs() {
  if (!fs.existsSync(ENV_JS_PATH)) {
    console.error(`‚ùå S√∫bor ${ENV_JS_PATH} nebol n√°jden√Ω.`);
    console.log('Najprv mus√≠te vytvori≈• .env.js s√∫bor pomocou setup-api-keys.js');
    return false;
  }

  try {
    // Naƒç√≠tanie obsahu .env.js
    const envJsContent = fs.readFileSync(ENV_JS_PATH, 'utf8');
    
    // Extrakcia Firebase API kƒæ√∫ƒçov pomocou regul√°rnych v√Ωrazov
    const firebaseApiKeyMatch = envJsContent.match(/API_KEY:\s*"([^"]*)"/);
    const firebaseAuthDomainMatch = envJsContent.match(/AUTH_DOMAIN:\s*"([^"]*)"/);
    const firebaseProjectIdMatch = envJsContent.match(/PROJECT_ID:\s*"([^"]*)"/);
    const firebaseStorageBucketMatch = envJsContent.match(/STORAGE_BUCKET:\s*"([^"]*)"/);
    const firebaseMessagingSenderIdMatch = envJsContent.match(/MESSAGING_SENDER_ID:\s*"([^"]*)"/);
    const firebaseAppIdMatch = envJsContent.match(/APP_ID:\s*"([^"]*)"/);
    const firebaseMeasurementIdMatch = envJsContent.match(/MEASUREMENT_ID:\s*"([^"]*)"/);
    
    // Extrakcia YouTube a RapidAPI kƒæ√∫ƒçov
    const youtubeApiKeyMatch = envJsContent.match(/YOUTUBE_API_KEY:\s*"([^"]*)"/);
    const rapidApiKeyMatch = envJsContent.match(/RAPID_API_KEY:\s*"([^"]*)"/);
    
    // Ulo≈æenie hodn√¥t do objektu
    if (firebaseApiKeyMatch) apiKeys.FIREBASE.API_KEY = firebaseApiKeyMatch[1];
    if (firebaseAuthDomainMatch) apiKeys.FIREBASE.AUTH_DOMAIN = firebaseAuthDomainMatch[1];
    if (firebaseProjectIdMatch) apiKeys.FIREBASE.PROJECT_ID = firebaseProjectIdMatch[1];
    if (firebaseStorageBucketMatch) apiKeys.FIREBASE.STORAGE_BUCKET = firebaseStorageBucketMatch[1];
    if (firebaseMessagingSenderIdMatch) apiKeys.FIREBASE.MESSAGING_SENDER_ID = firebaseMessagingSenderIdMatch[1];
    if (firebaseAppIdMatch) apiKeys.FIREBASE.APP_ID = firebaseAppIdMatch[1];
    if (firebaseMeasurementIdMatch) apiKeys.FIREBASE.MEASUREMENT_ID = firebaseMeasurementIdMatch[1];
    if (youtubeApiKeyMatch) apiKeys.YOUTUBE_API_KEY = youtubeApiKeyMatch[1];
    if (rapidApiKeyMatch) apiKeys.RAPID_API_KEY = rapidApiKeyMatch[1];
    
    // Naƒç√≠tanie Google Sign-In client ID z index.html
    const indexHtmlPath = path.join(__dirname, 'allin', 'index.html');
    if (fs.existsSync(indexHtmlPath)) {
      const indexHtmlContent = fs.readFileSync(indexHtmlPath, 'utf8');
      const googleSignInClientIdMatch = indexHtmlContent.match(/<meta name="google-signin-client_id" content="([^"]*)"/);
      if (googleSignInClientIdMatch) {
        apiKeys.GOOGLE_SIGNIN_CLIENT_ID = googleSignInClientIdMatch[1];
      }
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Chyba pri naƒç√≠tan√≠ API kƒæ√∫ƒçov:', error.message);
    return false;
  }
}

// Funkcia pre export API kƒæ√∫ƒçov do s√∫boru
function exportApiKeys(exportPath) {
  try {
    // Vytvorenie prieƒçinka, ak neexistuje
    if (!fs.existsSync(exportPath)) {
      fs.mkdirSync(exportPath, { recursive: true });
    }
    
    // Vytvorenie JSON s√∫boru s API kƒæ√∫ƒçmi
    const apiKeysJsonPath = path.join(exportPath, 'api-keys.json');
    fs.writeFileSync(apiKeysJsonPath, JSON.stringify(apiKeys, null, 2));
    
    // Vytvorenie JavaScript s√∫boru pre jednoduch≈°ie importovanie
    const apiKeysJsPath = path.join(exportPath, 'api-keys.js');
    const apiKeysJsContent = `// API kƒæ√∫ƒçe exportovan√© ${new Date().toLocaleString()}
// TENTO S√öBOR OBSAHUJE CITLIV√â √öDAJE - UCHOV√ÅVAJTE HO NA BEZPEƒåNOM MIESTE!

const API_KEYS = ${JSON.stringify(apiKeys, null, 2)};

module.exports = API_KEYS;
`;
    fs.writeFileSync(apiKeysJsPath, apiKeysJsContent);
    
    // Vytvorenie .env s√∫boru pre in√© projekty
    const envFilePath = path.join(exportPath, '.env');
    const envFileContent = `# API kƒæ√∫ƒçe exportovan√© ${new Date().toLocaleString()}
# TENTO S√öBOR OBSAHUJE CITLIV√â √öDAJE - UCHOV√ÅVAJTE HO NA BEZPEƒåNOM MIESTE!

FIREBASE_API_KEY=${apiKeys.FIREBASE.API_KEY}
FIREBASE_AUTH_DOMAIN=${apiKeys.FIREBASE.AUTH_DOMAIN}
FIREBASE_PROJECT_ID=${apiKeys.FIREBASE.PROJECT_ID}
FIREBASE_STORAGE_BUCKET=${apiKeys.FIREBASE.STORAGE_BUCKET}
FIREBASE_MESSAGING_SENDER_ID=${apiKeys.FIREBASE.MESSAGING_SENDER_ID}
FIREBASE_APP_ID=${apiKeys.FIREBASE.APP_ID}
FIREBASE_MEASUREMENT_ID=${apiKeys.FIREBASE.MEASUREMENT_ID}
YOUTUBE_API_KEY=${apiKeys.YOUTUBE_API_KEY}
RAPID_API_KEY=${apiKeys.RAPID_API_KEY}
GOOGLE_SIGNIN_CLIENT_ID=${apiKeys.GOOGLE_SIGNIN_CLIENT_ID}
`;
    fs.writeFileSync(envFilePath, envFileContent);
    
    // Vytvorenie README s√∫boru s in≈°trukciami
    const readmePath = path.join(exportPath, 'README.md');
    const readmeContent = `# Exportovan√© API kƒæ√∫ƒçe

Tento prieƒçinok obsahuje exportovan√© API kƒæ√∫ƒçe pre v√°≈° projekt. Uchov√°vajte tieto s√∫bory na bezpeƒçnom mieste!

## Obsah prieƒçinka

- **api-keys.json** - API kƒæ√∫ƒçe vo form√°te JSON
- **api-keys.js** - API kƒæ√∫ƒçe ako JavaScript modul
- **.env** - API kƒæ√∫ƒçe vo form√°te .env s√∫boru
- **import-api-keys.js** - Skript pre import API kƒæ√∫ƒçov sp√§≈• do projektu

## Bezpeƒçnostn√© odpor√∫ƒçania

1. **Nikdy nezdieƒæajte** tieto s√∫bory s nik√Ωm
2. **Neuchov√°vajte** tieto s√∫bory v cloudov√Ωch slu≈æb√°ch bez ≈°ifrovania
3. **Pravidelne z√°lohujte** tieto s√∫bory na bezpeƒçn√© miesto
4. **Pravidelne regenerujte** va≈°e API kƒæ√∫ƒçe pre zv√Ω≈°enie bezpeƒçnosti

## Ako importova≈• API kƒæ√∫ƒçe sp√§≈• do projektu

1. Skop√≠rujte s√∫bor \`import-api-keys.js\` do kore≈àov√©ho adres√°ra v√°≈°ho projektu
2. Spustite: \`node import-api-keys.js\`
3. Zadajte cestu k tomuto prieƒçinku s API kƒæ√∫ƒçmi
`;
    fs.writeFileSync(readmePath, readmeContent);
    
    // Vytvorenie import skriptu
    const importScriptPath = path.join(exportPath, 'import-api-keys.js');
    const importScriptContent = `#!/usr/bin/env node

/**
 * API Key Import Script
 * 
 * Tento skript importuje va≈°e API kƒæ√∫ƒçe z bezpeƒçn√©ho √∫lo≈æiska sp√§≈• do projektu.
 * 
 * Pou≈æitie:
 * 1. Skop√≠rujte tento s√∫bor do kore≈àov√©ho adres√°ra v√°≈°ho projektu
 * 2. Spustite: node import-api-keys.js
 * 3. Zadajte cestu k prieƒçinku s API kƒæ√∫ƒçmi
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Vytvorenie rozhrania pre ƒç√≠tanie vstupu
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Hlavn√° funkcia
async function main() {
  console.log('üîë API Key Import Script');
  
  // Z√≠skanie cesty k prieƒçinku s API kƒæ√∫ƒçmi
  const keysPath = await new Promise((resolve) => {
    rl.question('Zadajte cestu k prieƒçinku s API kƒæ√∫ƒçmi: ', (answer) => {
      resolve(answer.trim());
    });
  });
  
  // Kontrola existencie prieƒçinka
  if (!fs.existsSync(keysPath)) {
    console.error(\`‚ùå Prieƒçinok \${keysPath} nebol n√°jden√Ω.\`);
    rl.close();
    return;
  }
  
  // Naƒç√≠tanie API kƒæ√∫ƒçov
  const apiKeysJsonPath = path.join(keysPath, 'api-keys.json');
  if (!fs.existsSync(apiKeysJsonPath)) {
    console.error(\`‚ùå S√∫bor \${apiKeysJsonPath} nebol n√°jden√Ω.\`);
    rl.close();
    return;
  }
  
  try {
    // Naƒç√≠tanie API kƒæ√∫ƒçov z JSON s√∫boru
    const apiKeysJson = fs.readFileSync(apiKeysJsonPath, 'utf8');
    const apiKeys = JSON.parse(apiKeysJson);
    
    // Vytvorenie .env.js s√∫boru
    const envJsPath = path.join(__dirname, 'allin', '.env.js');
    const envJsContent = \`// Environment variables for API keys
// This file should not be committed to Git

// API keys for the application
window.ENV = {
  // Firebase configuration
  FIREBASE: {
    API_KEY: "\${apiKeys.FIREBASE.API_KEY}",
    AUTH_DOMAIN: "\${apiKeys.FIREBASE.AUTH_DOMAIN}",
    PROJECT_ID: "\${apiKeys.FIREBASE.PROJECT_ID}",
    STORAGE_BUCKET: "\${apiKeys.FIREBASE.STORAGE_BUCKET}",
    MESSAGING_SENDER_ID: "\${apiKeys.FIREBASE.MESSAGING_SENDER_ID}",
    APP_ID: "\${apiKeys.FIREBASE.APP_ID}",
    MEASUREMENT_ID: "\${apiKeys.FIREBASE.MEASUREMENT_ID}"
  },
  
  // YouTube API
  YOUTUBE_API_KEY: "\${apiKeys.YOUTUBE_API_KEY}",
  
  // RapidAPI
  RAPID_API_KEY: "\${apiKeys.RAPID_API_KEY}"
};

console.log("Environment variables loaded");\`;
    
    // Vytvorenie prieƒçinka, ak neexistuje
    const envJsDir = path.dirname(envJsPath);
    if (!fs.existsSync(envJsDir)) {
      fs.mkdirSync(envJsDir, { recursive: true });
    }
    
    // Z√°pis do s√∫boru
    fs.writeFileSync(envJsPath, envJsContent);
    console.log(\`‚úÖ S√∫bor .env.js bol √∫spe≈°ne vytvoren√Ω v \${envJsPath}\`);
    
    // Aktualiz√°cia Google Sign-In client ID v index.html
    if (apiKeys.GOOGLE_SIGNIN_CLIENT_ID) {
      const indexHtmlPath = path.join(__dirname, 'allin', 'index.html');
      if (fs.existsSync(indexHtmlPath)) {
        let indexHtmlContent = fs.readFileSync(indexHtmlPath, 'utf8');
        
        // Nahradenie placeholder hodnoty skutoƒçn√Ωm client ID
        indexHtmlContent = indexHtmlContent.replace(
          /<meta name="google-signin-client_id" content="[^"]*">/,
          \`<meta name="google-signin-client_id" content="\${apiKeys.GOOGLE_SIGNIN_CLIENT_ID}">\`
        );
        
        fs.writeFileSync(indexHtmlPath, indexHtmlContent);
        console.log(\`‚úÖ Google Sign-In client ID bol aktualizovan√Ω v \${indexHtmlPath}\`);
      }
    }
    
    console.log('\\n‚úÖ Import API kƒæ√∫ƒçov bol √∫spe≈°ne dokonƒçen√Ω!');
  } catch (error) {
    console.error('‚ùå Chyba pri importe API kƒæ√∫ƒçov:', error.message);
  }
  
  rl.close();
}

// Spustenie hlavnej funkcie
main().catch(error => {
  console.error('‚ùå Nastala chyba:', error);
  process.exit(1);
});
`;
    fs.writeFileSync(importScriptPath, importScriptContent);
    
    console.log(`‚úÖ API kƒæ√∫ƒçe boli √∫spe≈°ne exportovan√© do prieƒçinka: ${exportPath}`);
    console.log('üìÅ Vytvoren√© s√∫bory:');
    console.log(`   - ${apiKeysJsonPath} (JSON form√°t)`);
    console.log(`   - ${apiKeysJsPath} (JavaScript modul)`);
    console.log(`   - ${envFilePath} (.env form√°t)`);
    console.log(`   - ${readmePath} (in≈°trukcie)`);
    console.log(`   - ${importScriptPath} (import skript)`);
    
    return true;
  } catch (error) {
    console.error('‚ùå Chyba pri exporte API kƒæ√∫ƒçov:', error.message);
    return false;
  }
}

// Hlavn√° funkcia
async function main() {
  console.log('üîë API Key Export Script');
  
  // Naƒç√≠tanie API kƒæ√∫ƒçov z .env.js
  if (!loadApiKeysFromEnvJs()) {
    rl.close();
    return;
  }
  
  // Z√≠skanie cesty pre export
  const exportPath = await new Promise((resolve) => {
    rl.question('Zadajte cestu, kam chcete exportova≈• API kƒæ√∫ƒçe (napr. D:\\ApiKeys\\SoloLeveling): ', (answer) => {
      resolve(answer.trim());
    });
  });
  
  // Export API kƒæ√∫ƒçov
  exportApiKeys(exportPath);
  
  rl.close();
}

// Spustenie hlavnej funkcie
main().catch(error => {
  console.error('‚ùå Nastala chyba:', error);
  process.exit(1);
}); 